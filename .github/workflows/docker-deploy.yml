name: Pipeline CI/CD compl√®te avec SonarQube persistant

on:
  push:
    branches:
      - main

env:
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube-persistent
  SONARQUBE_PORT: 9000
  SONARQUBE_ADMIN_USER: admin
  SONAR_PROJECT_KEY: mbRabaa_frontend

jobs:
  build-app:
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8

      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "üëâ Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "üëâ Rapport de couverture dans coverage/:"
          ls -lh coverage/

      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test

  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 60  # Analyse peut prendre du temps
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üê≥ V√©rifier et d√©marrer SonarQube
        run: |
          # V√©rifier si le conteneur existe d√©j√†
          if ! docker ps -a --format '{{.Names}}' | grep -q ${{ env.SONARQUBE_CONTAINER_NAME }}; then
            echo "üöÄ D√©marrage nouveau conteneur SonarQube avec persistance..."
            docker volume create sonarqube_data || true
            docker volume create sonarqube_extensions || true
            docker volume create sonarqube_logs || true
            
            docker run -d --name ${{ env.SONARQUBE_CONTAINER_NAME }} \
              -p ${{ env.SONARQUBE_PORT }}:9000 \
              -v sonarqube_data:/opt/sonarqube/data \
              -v sonarqube_extensions:/opt/sonarqube/extensions \
              -v sonarqube_logs:/opt/sonarqube/logs \
              -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
              sonarqube:lts-community
            
            echo "‚è≥ Attente initialisation SonarQube (3-5 minutes)..."
            timeout 600 bash -c 'until curl -sSf "http://localhost:${{ env.SONARQUBE_PORT }}/api/system/status" | grep -q '"'"'"status":"UP"'"'"'; do sleep 10; done'
            
            # Configuration initiale
            echo "üîß Configuration initiale..."
            curl -u admin:admin -X POST "http://localhost:${{ env.SONARQUBE_PORT }}/api/users/change_password" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "login=admin" \
              --data-urlencode "previousPassword=admin" \
              --data-urlencode "password=${{ secrets.SONARQUBE_ADMIN_PASSWORD }}"
          else
            echo "‚ôªÔ∏è Conteneur SonarQube existant d√©tect√©, red√©marrage..."
            docker start ${{ env.SONARQUBE_CONTAINER_NAME }}
            sleep 30
          fi

          echo "‚úÖ SonarQube pr√™t sur http://localhost:${{ env.SONARQUBE_PORT }}"

      - name: üìä Ex√©cuter l'analyse SonarQube
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="http://${{ env.SONARQUBE_CONTAINER_NAME }}:${{ env.SONARQUBE_PORT }}" \
            -v "$(pwd):/usr/src" \
            -w /usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.projectName=frontend \
            -Dsonar.sources=src \
            -Dsonar.host.url=http://localhost:${{ env.SONARQUBE_PORT }} \
            -Dsonar.login=${{ env.SONARQUBE_ADMIN_USER }} \
            -Dsonar.password=${{ secrets.SONARQUBE_ADMIN_PASSWORD }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/__tests__/** \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.qualitygate.wait=true

      - name: ‚ÑπÔ∏è Informations d'acc√®s
        run: |
          echo "=============================================="
          echo "üîç Analyse SonarQube termin√©e avec succ√®s!"
          echo ""
          echo "üìä R√©sultats disponibles sur:"
          echo "http://localhost:${{ env.SONARQUBE_PORT }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}"
          echo ""
          echo "üîë Identifiants:"
          echo "Utilisateur: admin"
          echo "Mot de passe: ${{ secrets.SONARQUBE_ADMIN_PASSWORD }}"
          echo "=============================================="

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true

      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement r√©ussi!"