name: CI/CD Compl√®te - Build, Test, Analyse SonarQube, D√©ploiement Docker+K3s

on:
  push:
    branches:
      - main

env:
  # Configuration K3s
  K3S_VERSION: v1.26.5+k3s1
  K8S_FRONTEND_PATH: ./k8s
  
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube
  SONARQUBE_PORT: 9000
  SONAR_PROJECT_KEY: frontend-app
  SONAR_PROJECT_NAME: "Frontend Application"
  SONARQUBE_VERSION: 9.9.4-community
  
  # Configuration Portainer
  PORTAINER_USER: admin
  PORTAINER_PASS: ${{ secrets.PORTAINER_PASSWORD }}
  PORTAINER_PORT: 19000  # Chang√© de 9000 √† 19000 pour √©viter le conflit avec SonarQube
  PORTAINER_HTTPS_PORT: 19443

jobs:
  build-app:
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8

      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "üëâ Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "üëâ Rapport de couverture dans coverage/:"
          ls -lh coverage/

      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          
  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßπ Nettoyer l'environnement
        run: |
          docker stop ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker rm -f ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker volume rm -f sonarqube_data sonarqube_extensions sonarqube_logs || true
          lsof -ti:${{ env.SONARQUBE_PORT}} | xargs -r kill || true
          sleep 5

      - name: üê≥ D√©marrer SonarQube
        run: |
          docker volume create sonarqube_data || true
          docker volume create sonarqube_extensions || true
          docker volume create sonarqube_logs || true
          
          docker run -d \
            --name ${{ env.SONARQUBE_CONTAINER_NAME }} \
            -p ${{ env.SONARQUBE_PORT }}:9000 \
            -v sonarqube_data:/opt/sonarqube/data \
            -v sonarqube_extensions:/opt/sonarqube/extensions \
            -v sonarqube_logs:/opt/sonarqube/logs \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:${{ env.SONARQUBE_VERSION }}

          # Attendre que SonarQube soit pr√™t
          for i in {1..60}; do
            if curl -sSf http://localhost:${{ env.SONARQUBE_PORT }}/api/system/status | grep -q "\"status\":\"UP\""; then
              echo "‚úÖ SonarQube est pr√™t!"
              break
            fi
            sleep 10
            echo "‚åõ Tentative $i/60..."
          done

      - name: üîç Ex√©cuter l'analyse SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://localhost:${{ env.SONARQUBE_PORT }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}"
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=600
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

  deploy-docker:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true

      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement Docker r√©ussi!"

  deploy-k3s:
    needs: deploy-docker
    runs-on: self-hosted
    timeout-minutes: 45
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Nettoyer Portainer
        run: |
          docker stop portainer || true
          docker rm -f portainer || true
          docker volume rm -f portainer_data || true
          sleep 5

      - name: D√©ployer Portainer
        run: |
          docker volume create portainer_data
          docker run -d \
            --name portainer \
            -p ${{ env.PORTAINER_PORT }}:9000 \
            -p ${{ env.PORTAINER_HTTPS_PORT }}:9443 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v portainer_data:/data \
            --restart unless-stopped \
            portainer/portainer-ce:latest

      - name: Configurer kubectl
        run: |
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $USER:$USER ~/.kube/config
          sed -i "s/127.0.0.1/$(hostname -I | awk '{print $1}')/g" ~/.kube/config

      - name: ‚úÖ V√©rifier MetalLB
        run: |
          kubectl -n metallb-system get pods || { echo "MetalLB non d√©tect√©"; exit 1; }
          kubectl get ipaddresspools -n metallb-system

      - name: D√©ployer l'application
        run: |
          echo "R√©pertoire courant: $(pwd)"
          echo "Contenu du r√©pertoire:"
          ls -l
          echo "Contenu de k8s/:"
          ls -l k8s/
          
          kubectl apply -f k8s/namespace.yaml
          sed -i "s|\$DOCKER_IMAGE|${{ env.DOCKER_IMAGE }}|g" k8s/deployment.yaml
          sed -i "s|\$TAG|${{ github.sha }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/

      - name: Configurer Portainer
        run: |
          sleep 30
          curl -X POST http://localhost:${{ env.PORTAINER_PORT }}/api/users/admin/init \
            -H "Content-Type: application/json" \
            -d '{"Username":"admin","Password":"'"${{ env.PORTAINER_PASS }}"'"}' \
            || echo "Portainer d√©j√† configur√©"