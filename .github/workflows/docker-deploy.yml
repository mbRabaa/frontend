name: Pipeline CI/CD Compl√®te avec SonarQube

on:
  push:
    branches:
      - main

env:
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube
  SONARQUBE_PORT: 9000
  SONAR_PROJECT_KEY: frontend-app
  SONAR_PROJECT_NAME: "Frontend Application"
  SONARQUBE_VERSION: 9.9.4-community

jobs:
  build-app:
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8

      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "üëâ Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "üëâ Rapport de couverture dans coverage/:"
          ls -lh coverage/

      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          
  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßπ Nettoyer l'environnement
        run: |
          docker stop ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker rm -f ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker volume rm -f sonarqube_data sonarqube_extensions sonarqube_logs || true
          lsof -ti:${{ env.SONARQUBE_PORT}} | xargs -r kill || true
          sleep 5

      - name: üê≥ D√©marrer SonarQube
        run: |
          docker volume create sonarqube_data || true
          docker volume create sonarqube_extensions || true
          docker volume create sonarqube_logs || true
          
          docker run -d \
            --name ${{ env.SONARQUBE_CONTAINER_NAME }} \
            -p ${{ env.SONARQUBE_PORT }}:9000 \
            -v sonarqube_data:/opt/sonarqube/data \
            -v sonarqube_extensions:/opt/sonarqube/extensions \
            -v sonarqube_logs:/opt/sonarqube/logs \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:${{ env.SONARQUBE_VERSION }}

          # Attendre que SonarQube soit op√©rationnel
          for i in {1..60}; do
            if curl -sSf http://localhost:${{ env.SONARQUBE_PORT }}/api/system/status | grep -q "\"status\":\"UP\""; then
              echo "‚úÖ SonarQube est pr√™t!"
              break
            fi
            sleep 10
            echo "‚åõ Tentative $i/60..."
          done

      - name: üîë Configurer l'authentification
        run: |
          sleep 30
          if [ -z "${{ secrets.SONARQUBE_TOKEN }}" ]; then
            echo "::error::Le token SonarQube n'est pas configur√©"
            exit 1
          fi

      - name: üîç Ex√©cuter l'analyse SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://localhost:${{ env.SONARQUBE_PORT }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}"
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=600
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

      - name: ‚ÑπÔ∏è Afficher les r√©sultats
        run: |
          echo "=========================================="
          echo "üîç Analyse SonarQube termin√©e avec succ√®s!"
          echo "üåê Acc√©dez aux r√©sultats sur: http://localhost:${{ env.SONARQUBE_PORT }}"
          echo "=========================================="

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

  deploy-docker:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true

      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement r√©ussi!"

      - name: ‚úÖ Confirmer la r√©ussite
        run: echo "Deploy r√©ussi, d√©clenchant deploy-k3s"

  deploy-k3s:
    needs: deploy-docker
    runs-on: self-hosted
    timeout-minutes: 45
    steps:
      - name: üîß V√©rifier les pr√©requis
        run: |
          docker --version
          which k3s || echo "k3s non install√©"

      - name: üîß Installer/configurer k3s
        run: |
          if ! command -v k3s &> /dev/null; then
            echo "Installation de k3s..."
            curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable traefik --disable servicelb --write-kubeconfig-mode 644" sh -
          else
            echo "k3s d√©j√† install√©"
          fi
          
          # Configurer l'acc√®s kubectl
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $(id -u):$(id -g) ~/.kube/config
          export KUBECONFIG=~/.kube/config

      - name: üõ†Ô∏è V√©rifier l'acc√®s kubectl
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: üõ†Ô∏è Installer MetalLB
        run: |
          # Donner les permissions n√©cessaires √† l'utilisateur
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
          echo "Attente de l'initialisation de MetalLB..."
          sleep 30
          
          if [ -d "k8s/metallb/" ]; then
            kubectl apply -f k8s/metallb/
          else
            echo "Configuration MetalLB personnalis√©e non trouv√©e"
          fi

      - name: üê≥ D√©ployer Portainer
        run: |
          kubectl create namespace portainer || true
          if [ -d "k8s/portainer/" ]; then
            kubectl apply -f k8s/portainer/
            kubectl patch svc -n portainer portainer-service \
              --type='json' \
              -p='[{"op": "add", "path": "/spec/ports/0/nodePort", "value":30001}]'
          else
            echo "Configuration Portainer non trouv√©e"
          fi

      - name: üöÄ D√©ployer le frontend
        run: |
          if [ -d "k8s/frontend/" ]; then
            sed -i "s|\$DOCKER_IMAGE|${{ env.DOCKER_IMAGE }}|g" k8s/frontend/deployment.yaml
            sed -i "s|\$TAG|${{ github.sha }}|g" k8s/frontend/deployment.yaml
            kubectl apply -f k8s/frontend/
          else
            echo "Configuration frontend non trouv√©e"
            exit 1
          fi

      - name: üìä V√©rifier les d√©ploiements
        run: |
          kubectl get pods -A
          kubectl get svc -A
          echo "=========================================="
          echo "üåê Portainer: http://$(hostname -I | awk '{print $1}'):30001"
          echo "üöÄ Frontend d√©ploy√© avec succ√®s sur k3s"
          echo "=========================================="