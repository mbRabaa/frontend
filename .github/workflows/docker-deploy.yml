name: CI/CD - Build, Test, Analyse SonarQube, D√©ploiement Docker+K3s

on:
  push:
    branches:
      - main

env:
  # Configuration K3s
  K3S_VERSION: v1.26.5+k3s1
  K8S_FRONTEND_PATH: ./k8s
  NODE_PORT: 30080
  
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/front_end
  CONTAINER_NAME: frontend-prod
  PORT: 80
  DOCKER_BUILDKIT: 1
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube
  SONARQUBE_PORT: 9000
  SONAR_PROJECT_KEY: front_end
  SONAR_PROJECT_NAME: "Front End"
  SONARQUBE_VERSION: 9.9.4-community
  
  # Configuration Portainer
  PORTAINER_USER: admin
  PORTAINER_PASS: ${{ secrets.PORTAINER_PASSWORD }}
  PORTAINER_PORT: 19000
  PORTAINER_HTTPS_PORT: 19443

jobs:
  build-app:
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8
          
      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "Rapport de couverture dans coverage/:"
          ls -lh coverage/
          
      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          
  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üê≥ D√©marrer SonarQube
        run: |
          docker stop $SONARQUBE_CONTAINER_NAME || true
          docker rm -f $SONARQUBE_CONTAINER_NAME || true
          docker volume create sonarqube_data || true
          docker volume create sonarqube_extensions || true
          docker volume create sonarqube_logs || true
          
          docker run -d \
            --name $SONARQUBE_CONTAINER_NAME \
            -p $SONARQUBE_PORT:9000 \
            -v sonarqube_data:/opt/sonarqube/data \
            -v sonarqube_extensions:/opt/sonarqube/extensions \
            -v sonarqube_logs:/opt/sonarqube/logs \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:$SONARQUBE_VERSION

          # Attente de la disponibilit√©
          for i in {1..30}; do
            if curl -sSf http://localhost:$SONARQUBE_PORT/api/system/status | grep -q '"status":"UP"'; then
              echo "SonarQube pr√™t!"
              break
            fi
            sleep 10
          done

      - name: üîç Analyse SonarQube
        run: |
          HOST_IP=$(hostname -I | awk '{print $1}')
          docker run --rm \
            --network host \
            -e SONAR_HOST_URL="http://$HOST_IP:$SONARQUBE_PORT" \
            -e SONAR_TOKEN="${{ secrets.SONARQUBE_TOKEN }}" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli:latest \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.projectName="$SONAR_PROJECT_NAME" \
            -Dsonar.sources=src \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.qualitygate.wait=true

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üîë Authentification Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: üì• R√©cup√©rer l'artefact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Build et Push Docker
        run: |
          docker build \
            -t $DOCKER_IMAGE:latest \
            -t $DOCKER_IMAGE:$GITHUB_SHA \
            .
          
          docker push $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$GITHUB_SHA

  deploy-docker:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üîë Authentification Docker
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: üßπ Nettoyage
        run: |
          docker stop $CONTAINER_NAME || true
          docker rm -f $CONTAINER_NAME || true

      - name: üöÄ D√©ploiement
        run: |
          docker pull $DOCKER_IMAGE:latest
          docker run -d \
            --name $CONTAINER_NAME \
            -p $PORT:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            $DOCKER_IMAGE:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:$PORT/ || exit 1
          echo "D√©ploiement Docker r√©ussi!"

  deploy-k3s:
    needs: deploy-docker
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: üõ†Ô∏è Configuration K3s (avec logging am√©lior√©)
        run: |
          set -x  # Active le mode debug
          echo "### Nettoyage de l'ancienne installation ###"
          sudo k3s-uninstall.sh || echo "Aucune installation existante √† d√©sinstaller"
          sudo rm -rf /etc/rancher/k3s /var/lib/rancher/k3s /var/lib/cni /etc/cni/net.d/* || true
          
          echo "### Installation de K3s ###"
          curl -v -sfL https://get.k3s.io | \
            INSTALL_K3S_VERSION=$K3S_VERSION \
            sh -s - \
            --write-kubeconfig-mode 644 \
            --disable traefik \
            --node-ip $(hostname -I | awk '{print $1}') \
            --docker | tee k3s_install.log

          echo "### V√©rification de l'installation ###"
          sudo systemctl status k3s --no-pager || true
          journalctl -u k3s -n 50 --no-pager || true
          cat /var/log/syslog | grep k3s | tail -50 || true

      - name: üîß Configuration kubectl
        run: |
          set -x
          echo "### Configuration de l'acc√®s kubectl ###"
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $USER:$USER ~/.kube/config
          sudo chmod 600 ~/.kube/config
          sed -i "s/127.0.0.1/$(hostname -I | awk '{print $1}')/g" ~/.kube/config
          
          echo "### V√©rification cluster ###"
          kubectl cluster-info
          kubectl get nodes -o wide
          kubectl api-resources

      - name: üöÄ D√©ploiement K8s (avec logging √©tendu)
        run: |
          set -x
          echo "### Cr√©ation namespace ###"
          kubectl create namespace frontend || kubectl get namespace frontend -o yaml
          
          echo "### Contenu des fichiers de d√©ploiement ###"
          echo "=== deployment.yaml ==="
          cat $K8S_FRONTEND_PATH/deployment.yaml || true
          echo "=== service.yaml ==="
          cat $K8S_FRONTEND_PATH/service.yaml || true
          
          echo "### Application des manifests ###"
          envsubst < $K8S_FRONTEND_PATH/deployment.yaml > processed_deployment.yaml
          envsubst < $K8S_FRONTEND_PATH/service.yaml > processed_service.yaml
          
          echo "=== Fichiers trait√©s ==="
          cat processed_deployment.yaml
          cat processed_service.yaml
          
          kubectl apply -f processed_deployment.yaml
          kubectl apply -f processed_service.yaml

      - name: üîç V√©rification approfondie
        run: |
          set -x
          echo "### √âtat du d√©ploiement ###"
          kubectl get all -n frontend -o wide
          kubectl describe deployment -n frontend
          kubectl get events -n frontend --sort-by='.metadata.creationTimestamp'
          
          echo "### Logs des pods ###"
          kubectl get pods -n frontend -o name | xargs -I {} kubectl logs {} -n frontend --all-containers=true
          
          echo "### V√©rification de la sant√© ###"
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://$(hostname -I | awk '\''{print $1}'\''):$NODE_PORT)" != "200" ]]; do sleep 5; done' || true
          curl -v http://$(hostname -I | awk '{print $1}'):$NODE_PORT

      - name: üê≥ Portainer (avec gestion d'erreur)
        run: |
          set -x
          echo "### D√©ploiement de Portainer ###"
          docker run -d \
            --name portainer \
            -p $PORTAINER_PORT:9000 \
            -p $PORTAINER_HTTPS_PORT:9443 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v portainer_data:/data \
            --restart unless-stopped \
            portainer/portainer-ce:latest || true
          
          echo "### Attente du d√©marrage ###"
          sleep 30
          
          echo "### Initialisation de Portainer ###"
          curl -v -X POST "http://localhost:$PORTAINER_PORT/api/users/admin/init" \
            -H "Content-Type: application/json" \
            -d '{"Username": "'"$PORTAINER_USER"'", "Password": "'"$PORTAINER_PASS"'"}' || true
          
          echo "### URL d'acc√®s ###"
          echo "Portainer: http://$(hostname -I | awk '{print $1}'):$PORTAINER_PORT"