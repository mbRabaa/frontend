name:  chaine CI/CD - Build, Test, Analyse SonarQube, D√©ploiement Docker+K3s

on:
  push:
    branches:
      - main

env:
  # Configuration K3s
  K3S_VERSION: v1.26.5+k3s1
  K8S_FRONTEND_PATH: ./k8s
  NODE_PORT: 30080
  
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube
  SONARQUBE_PORT: 9000
  SONAR_PROJECT_KEY: frontend-app
  SONAR_PROJECT_NAME: "Frontend Application"
  SONARQUBE_VERSION: 9.9.4-community
  
  # Configuration Portainer
  PORTAINER_USER: admin
  PORTAINER_PASS: ${{ secrets.PORTAINER_PASSWORD }}
  PORTAINER_PORT: 19000
  PORTAINER_HTTPS_PORT: 19443

jobs:
  build-app:
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8
      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "üëâ Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "üëâ Rapport de couverture dans coverage/:"
          ls -lh coverage/
      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          
  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõé Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßπ Nettoyer l'environnement
        run: |
          docker stop ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker rm -f ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker volume rm -f sonarqube_data sonarqube_extensions sonarqube_logs || true
          lsof -ti:${{ env.SONARQUBE_PORT}} | xargs -r kill || true
          sleep 5
      - name: üê≥ D√©marrer SonarQube
        run: |
          docker volume create sonarqube_data || true
          docker volume create sonarqube_extensions || true
          docker volume create sonarqube_logs || true
          
          docker run -d \
            --name ${{ env.SONARQUBE_CONTAINER_NAME }} \
            -p ${{ env.SONARQUBE_PORT }}:9000 \
            -v sonarqube_data:/opt/sonarqube/data \
            -v sonarqube_extensions:/opt/sonarqube/extensions \
            -v sonarqube_logs:/opt/sonarqube/logs \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:${{ env.SONARQUBE_VERSION }}
          # Attendre que SonarQube soit pr√™t
          for i in {1..60}; do
            if curl -sSf http://localhost:${{ env.SONARQUBE_PORT }}/api/system/status | grep -q "\"status\":\"UP\""; then
              echo "‚úÖ SonarQube est pr√™t!"
              break
            fi
            sleep 10
            echo "‚åõ Tentative $i/60..."
          done
      - name: üîç Ex√©cuter l'analyse SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://localhost:${{ env.SONARQUBE_PORT }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}"
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=600
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

  deploy-docker:
    needs: build-and-push
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true
      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest
      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement Docker r√©ussi!"

  deploy-k3s:
    needs: deploy-docker
    runs-on: self-hosted
    timeout-minutes: 60
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Pr√©parer l'environnement K3s
        run: |
          # Arr√™ter et d√©sinstaller K3s proprement
          sudo /usr/local/bin/k3s-uninstall.sh || true
          sudo /usr/local/bin/k3s-killall.sh || true
          
          # Nettoyage approfondi
          sudo rm -rf /etc/rancher/k3s/
          sudo rm -rf /var/lib/rancher/k3s/
          sudo rm -rf /var/lib/cni/
          sudo rm -rf /etc/cni/net.d/*
          
          # Installer les d√©pendances r√©seau
          sudo modprobe overlay
          sudo modprobe br_netfilter
          
          # Configurer sysctl
          echo -e "net.bridge.bridge-nf-call-iptables=1\nnet.ipv4.ip_forward=1" | sudo tee /etc/sysctl.d/k8s.conf
          sudo sysctl --system
          
          # R√©installer K3s
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${{ env.K3S_VERSION }} sh -s - \
            --write-kubeconfig-mode 644 \
            --disable traefik \
            --node-ip $(hostname -I | awk '{print $1}') \
            --docker
          
          # V√©rifier que K3s est bien d√©marr√©
          for i in {1..30}; do
            if sudo systemctl is-active --quiet k3s; then
              echo "‚úÖ K3s est actif"
              break
            fi
            echo "‚åõ Tentative $i/30 - En attente du d√©marrage de K3s..."
            sleep 10
          done
          
          # Installer Metrics Server
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl patch deployment metrics-server -n kube-system --type 'json' -p '[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

      - name: Configurer kubectl
        run: |
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $USER:$USER ~/.kube/config
          sudo chmod 600 ~/.kube/config
          sed -i "s/127.0.0.1/$(hostname -I | awk '{print $1}')/g" ~/.kube/config
          
          # V√©rification
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Nettoyer l'ancien d√©ploiement
        run: |
          kubectl delete all -l app=frontend -n frontend --ignore-not-found || true
          kubectl delete pvc -l app=frontend -n frontend --ignore-not-found || true
          kubectl delete namespace frontend --ignore-not-found || true
          sleep 15

      - name: D√©ployer l'application
        run: |
          # Cr√©er le namespace
          kubectl create namespace frontend || true
          
          # Appliquer les configurations
          sed -i "s|\$DOCKER_IMAGE|${{ env.DOCKER_IMAGE }}|g" k8s/deployment.yaml
          sed -i "s|\$TAG|${{ github.sha }}|g" k8s/deployment.yaml
          
          # Modifier le service pour utiliser NodePort
          sed -i 's/LoadBalancer/NodePort/g' k8s/service.yaml
          sed -i "/nodePort/d" k8s/service.yaml
          sed -i "/port: 80/a\      nodePort: ${{ env.NODE_PORT }}" k8s/service.yaml
          
          kubectl apply -f k8s/

      - name: V√©rifier le d√©ploiement
        run: |
          # Attendre avec v√©rification active
          for i in {1..30}; do
            READY=$(kubectl get pods -n frontend -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].name}' | wc -w)
            if [ "$READY" -eq 1 ]; then
              echo "‚úÖ Tous les conteneurs sont pr√™ts!"
              break
            fi
            echo "‚åõ Tentative $i/30 - En attente que les conteneurs d√©marrent..."
            kubectl get pods -n frontend -o wide
            kubectl describe pods -n frontend
            sleep 10
          done
          
          if [ "$READY" -ne 1 ]; then
            echo "=== √âchec du d√©ploiement ==="
            kubectl logs -n frontend -l app=frontend --tail=50
            exit 1
          fi
          
          echo "=== √âtat final ==="
          kubectl get pods -n frontend -o wide
          kubectl get svc -n frontend -o wide
          echo "Application accessible sur: http://$(hostname -I | awk '{print $1}'):${{ env.NODE_PORT }}"

      - name: üê≥ D√©ployer et configurer Portainer
        run: |
          # Nettoyer l'instance existante
          docker stop portainer || true
          docker rm -f portainer || true
          docker volume create portainer_data || true
          
          # D√©marrer Portainer
          docker run -d \
            --name portainer \
            -p ${{ env.PORTAINER_PORT }}:9000 \
            -p ${{ env.PORTAINER_HTTPS_PORT }}:9443 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v portainer_data:/data \
            --restart unless-stopped \
            portainer/portainer-ce:latest

          # Attendre que Portainer soit pr√™t
          echo "‚è≥ Attente du d√©marrage de Portainer..."
          until curl -sSf http://localhost:${{ env.PORTAINER_PORT }}/api/system/status | grep -q '"status":"OK"'; do
            sleep 5
          done
          
          # Cr√©er l'utilisateur admin
          echo "üõ†Ô∏è Cr√©ation de l'utilisateur admin..."
          curl -X POST "http://localhost:${{ env.PORTAINER_PORT }}/api/users/admin/init" \
            -H "Content-Type: application/json" \
            -d '{"Username": "${{ env.PORTAINER_USER }}", "Password": "${{ env.PORTAINER_PASS }}"}'
          
          # Obtenir le JWT pour l'authentification
          echo "üîë Authentification..."
          JWT=$(curl -sS -X POST "http://localhost:${{ env.PORTAINER_PORT }}/api/auth" \
            -H "Content-Type: application/json" \
            -d '{"Username": "${{ env.PORTAINER_USER }}", "Password": "${{ env.PORTAINER_PASS }}"}' | jq -r '.jwt')
          
          # Ajouter l'environnement Docker local
          echo "üê≥ Ajout de l'environnement Docker local..."
          curl -X POST "http://localhost:${{ env.PORTAINER_PORT }}/api/endpoints" \
            -H "Authorization: Bearer $JWT" \
            -H "Content-Type: application/json" \
            -d '{"Name": "Local Docker", "EndpointCreationType": 1}'
          
          # Ajouter l'environnement K3s
          echo "‚ò∏Ô∏è Ajout de l'environnement K3s..."
          K3S_CONFIG=$(cat ~/.kube/config | base64 -w0)
          curl -X POST "http://localhost:${{ env.PORTAINER_PORT }}/api/endpoints" \
            -H "Authorization: Bearer $JWT" \
            -H "Content-Type: application/json" \
            -d '{
              "Name": "K3s Cluster",
              "EndpointCreationType": 4,
              "KubernetesConfiguration": {
                "KubeConfig": "'"$K3S_CONFIG"'"
              }
            }'
          
          echo "‚úÖ Portainer configur√© avec succ√®s!"
          echo "üîó Acc√®s: http://$(hostname -I | awk '{print $1}'):${{ env.PORTAINER_PORT }}"
          echo "üë§ Utilisateur: ${{ env.PORTAINER_USER }}"
          echo "üîí Mot de passe: ${{ env.PORTAINER_PASS }}"