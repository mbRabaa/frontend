name: Pipeline CI/CD Compl√®te avec SonarQube

on:
  push:
    branches:
      - main

env:
  # Configuration Docker
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  
  # Configuration SonarQube
  SONARQUBE_CONTAINER_NAME: sonarqube
  SONARQUBE_PORT: 9000
  SONAR_PROJECT_KEY: frontend-app
  SONAR_PROJECT_NAME: "Frontend Application"

jobs:
  build-app:
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8

      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage
          echo "üëâ Build g√©n√©r√© dans dist/:"
          ls -lh dist/
          echo "üëâ Rapport de couverture dans coverage/:"
          ls -lh coverage/

      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test

  sonarqube-analysis:
    needs: unit-tests
    runs-on: self-hosted
    timeout-minutes: 45
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßπ Nettoyer l'environnement
        run: |
          docker stop ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker rm -f ${{ env.SONARQUBE_CONTAINER_NAME }} || true
          docker network prune -f || true
          sudo fuser -k ${{ env.SONARQUBE_PORT }}/tcp || true

      - name: üê≥ D√©marrer SonarQube
        run: |
          docker volume create sonarqube_data || true
          docker volume create sonarqube_extensions || true
          
          docker run -d \
            --name ${{ env.SONARQUBE_CONTAINER_NAME }} \
            -p ${{ env.SONARQUBE_PORT }}:9000 \
            -v sonarqube_data:/opt/sonarqube/data \
            -v sonarqube_extensions:/opt/sonarqube/extensions \
            -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
            sonarqube:9.9.1-community
          
          timeout 300 bash -c '
            while ! curl -sSf http://localhost:${{ env.SONARQUBE_PORT }}/api/system/status | grep -q "\"status\":\"UP\"";
            do
              sleep 10
              echo "En attente du d√©marrage de SonarQube..."
            done'

      - name: üîë Configurer SonarQube
        run: |
          curl -u admin:admin -X POST "http://localhost:${{ env.SONARQUBE_PORT }}/api/users/change_password" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "login=admin" \
            --data-urlencode "previousPassword=admin" \
            --data-urlencode "password=${{ secrets.SONAR_ADMIN_PASSWORD }}"
          
          SONAR_TOKEN=$(curl -u admin:${{ secrets.SONAR_ADMIN_PASSWORD }} \
            -X POST "http://localhost:${{ env.SONARQUBE_PORT }}/api/user_tokens/generate" \
            -d "name=github-action" \
            | jq -r '.token')
          
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$SONAR_TOKEN"

      - name: üîç Ex√©cuter l'analyse SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:${{ env.SONARQUBE_PORT }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}"
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.qualitygate.wait=true

      - name: ‚ÑπÔ∏è Afficher les r√©sultats
        run: |
          echo "=========================================="
          echo "üîç Analyse SonarQube termin√©e avec succ√®s!"
          echo "üåê Acc√©dez aux r√©sultats sur: http://localhost:${{ env.SONARQUBE_PORT }}"
          echo "üîë Identifiants:"
          echo "Utilisateur: admin"
          echo "Mot de passe: ${{ secrets.SONAR_ADMIN_PASSWORD }}"
          echo "=========================================="

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true

      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement r√©ussi!"