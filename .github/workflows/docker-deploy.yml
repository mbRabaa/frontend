name: Pipeline CI/CD Avancée

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache

jobs:
  unit-tests:
    runs-on: self-hosted
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: ⎔ Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 📦 Installer les dépendances
        run: npm ci --prefer-offline

      - name: 🧪 Exécuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test

  build-app:
    needs: unit-tests
    runs-on: self-hosted
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: ⎔ Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 📦 Installer les dépendances
        run: npm ci --prefer-offline

      - name: 🛠️ Builder l'application
        run: |
          npm run build
          echo "👉 Contenu du dossier dist/:"
          ls -lh dist/

      - name: 📦 Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1
          if-no-files-found: error

  build-and-push:
    needs: build-app
    runs-on: self-hosted
    steps:
      - name: 🛠️ Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: 🔑 Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 📥 Récupérer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: 🔄 Récupérer le cache
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }} || true

      - name: 🐳 Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: 🧹 Nettoyer le cache
        run: |
          docker builder prune -f

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 🧹 Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true
          docker system prune -af --volumes

      - name: 🚀 Déployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ✅ Vérification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "🚀 Déploiement réussi !"