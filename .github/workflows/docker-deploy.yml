name: Pipeline CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-app:
    runs-on: self-hosted
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: ⎔ Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 📦 Installer les dépendances
        run: npm ci

      - name: 🛠️ Builder l'application
        run: |
          npm run build
          ls -R dist/  # Vérification du contenu du dossier dist

      - name: 🧪 Exécuter les tests
        run: npm test
        env:
          CI: true

      - name: 📦 Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/  # Changé de build/ à dist/
          retention-days: 1
          if-no-files-found: error

  build-and-push:
    needs: build-app
    runs-on: self-hosted
    steps:
      - name: 🛎️ Checkout du code
        uses: actions/checkout@v3

      - name: 📥 Récupérer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/  # Changé de build/ à dist/

      - name: 🔑 Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 🔨 Construire l'image
        uses: docker/build-push-action@v3
        with:
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Pousser l'image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 🧹 Nettoyage
        run: |
          docker rm -f mon-container || true
          docker system prune -f

      - name: 🚀 Déploiement
        run: |
          docker run -d \
            --name mon-container \
            -p 80:80 \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/frontend:latest