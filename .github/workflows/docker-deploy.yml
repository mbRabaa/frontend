name:  chaine CI-CD

on:
  push:
    branches:
      - main

env:
  # Configuration Monitoring
  GRAFANA_PORT: 30091
  PROMETHEUS_PORT: 30090
  ALERTMANAGER_PORT: 30092
  GRAFANA_ADMIN_USER: ${{ secrets.GRAFANA_ADMIN_USER }}
  GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

  # Alertmanager
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

jobs:
  cluster-monitoring:
    runs-on: self-hosted
    timeout-minutes: 30
    env:
      ALERTMANAGER_PORT: 30092
      PROMETHEUS_PORT: 30090
      GRAFANA_PORT: 30091

    steps:
      - name: üîß Configurer kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl cluster-info

      - name: üì• T√©l√©charger les fichiers de configuration
        uses: actions/checkout@v4
        with:
          path: '.'

      - name: üõ†Ô∏è V√©rifier l'existence des fichiers
        run: |
          echo "=== Contenu du dossier monitoring-config ==="
          ls -la monitoring-config/
          ls -la monitoring-config/alertmanager/
          ls -la monitoring-config/Prometheus/
          [ -f "monitoring-config/alertmanager/alertmanager-config.yml" ] || { echo "::error::Fichier alertmanager-config.yml manquant"; exit 1; }
          [ -f "monitoring-config/alertmanager/alertmanager-deployment.yml" ] || { echo "::error::Fichier alertmanager-deployment.yml manquant"; exit 1; }
          [ -f "monitoring-config/Prometheus/alert-rules.yml" ] || { echo "::error::Fichier alert-rules.yml manquant"; exit 1; }

      - name: üõ†Ô∏è D√©ployer AlertManager
        timeout-minutes: 20
        run: |
          # Appliquer la configuration
          kubectl apply -f monitoring-config/alertmanager/alertmanager-deployment.yml
          
          # Attendre avec gestion des erreurs am√©lior√©e
          for i in {1..5}; do
            if kubectl -n monitoring wait --for=condition=ready pod -l app=alertmanager --timeout=180s; then
              echo "‚úÖ AlertManager d√©marr√© avec succ√®s"
              exit 0
            fi
            
            echo "‚ö†Ô∏è Tentative $i/5 √©chou√©e. Diagnostic..."
            
            # Collecte des logs et informations de d√©bogage
            kubectl -n monitoring get pods -l app=alertmanager -o wide
            kubectl -n monitoring describe pod -l app=alertmanager
            kubectl -n monitoring logs -l app=alertmanager --tail=100 || true
            
            if [ $i -lt 5 ]; then
              echo "üîÑ Red√©marrage du d√©ploiement..."
              kubectl -n monitoring rollout restart deployment alertmanager
              sleep 20
            fi
          done
          
          echo "‚ùå √âchec apr√®s 5 tentatives"
          exit 1

      - name: ‚éà Installer Prometheus+Grafana avec Helm
        timeout-minutes: 15
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set grafana.adminUser="${{ secrets.GRAFANA_ADMIN_USER }}" \
            --set grafana.adminPassword="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --set prometheus.service.type=NodePort \
            --set prometheus.service.nodePort=$PROMETHEUS_PORT \
            --set grafana.service.type=NodePort \
            --set grafana.service.nodePort=$GRAFANA_PORT \
            --set alertmanager.enabled=false \
            --set prometheus.prometheusSpec.alerting.alertmanagers[0].apiVersion="v2" \
            --set prometheus.prometheusSpec.alerting.alertmanagers[0].scheme="http" \
            --set prometheus.prometheusSpec.alerting.alertmanagers[0].staticConfigs[0].targets[0]="alertmanager.monitoring.svc:9093" \
            --set prometheus.prometheusSpec.alerting.alertmanagers[0].pathPrefix="/" \
            --set prometheus.prometheusSpec.alerting.alertmanagers[0].timeout="10s" \
            --set prometheus.prometheusSpec.alertmanagerConfigSelector.matchLabels.release="monitoring" \
            --set prometheus.prometheusSpec.alertmanagerConfigNamespaceSelector.matchLabels.name="monitoring" \
            --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false \
            --set prometheus.prometheusSpec.ruleSelector.matchLabels.release="monitoring" \
            --set prometheus.prometheusSpec.ruleSelector.matchLabels.app="kube-prometheus-stack" \
            --set prometheus.prometheusSpec.ruleNamespaceSelector.matchLabels.name="monitoring" \
            --set prometheusOperator.prometheusConfigReloader.enabled=true \
            --wait

      - name: ‚è≥ Attendre que Prometheus soit pr√™t
        run: |
          for i in {1..30}; do
            if kubectl -n monitoring get pods -l app.kubernetes.io/name=prometheus -o jsonpath='{.items[0].status.phase}' | grep -q "Running"; then
              echo "‚úÖ Prometheus est en cours d'ex√©cution"
              # Attendre que Prometheus soit vraiment pr√™t
              kubectl -n monitoring wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus --timeout=120s
              sleep 30
              exit 0
            fi
            sleep 10
            echo "‚åõ Tentative $i/30 - En attente du d√©marrage de Prometheus..."
          done
          echo "‚ùå Prometheus n'a pas d√©marr√© apr√®s 5 minutes"
          exit 1

      - name: üö® D√©ployer les r√®gles d'alerte
        run: |
          kubectl apply -f monitoring-config/Prometheus/alert-rules.yml
          # V√©rifier que les r√®gles sont bien cr√©√©es
          kubectl -n monitoring get prometheusrules -o yaml
          sleep 30  # Donner du temps √† Prometheus pour charger les r√®gles

      - name: üîÑ V√©rifier les r√®gles d'alerte
        run: |
          echo "=== V√©rification des r√®gles d√©ploy√©es ==="
          kubectl -n monitoring get prometheusrules -o wide
          
          echo "=== D√©tail des r√®gles YAML ==="
          kubectl -n monitoring get prometheusrules -o yaml
          
          echo "=== Contenu des r√®gles dans Prometheus ==="
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          echo "Acc√®s √† Prometheus via: http://$NODE_IP:$PROMETHEUS_PORT"
          
          # V√©rification des r√®gles via l'API Prometheus
          curl -s "http://$NODE_IP:$PROMETHEUS_PORT/api/v1/rules" | jq .
          
          # V√©rification sp√©cifique des alertes
          echo "=== R√®gles d'alerte actives ==="
          curl -s "http://$NODE_IP:$PROMETHEUS_PORT/api/v1/alerts" | jq '.data.alerts[] | {state, name}'
          
          # V√©rifier les logs de Prometheus pour les erreurs de r√®gles
          echo "=== Logs Prometheus (erreurs r√®gles) ==="
          kubectl -n monitoring logs -l app.kubernetes.io/name=prometheus | grep -i -E 'rule|alert' | tail -20

      - name: üì© Tester les notifications
        run: |
          # R√©cup√©rer l'IP du node
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          ALERTMANAGER_URL="http://$NODE_IP:$ALERTMANAGER_PORT"
          
          echo "=== Envoi d'alerte test √† $ALERTMANAGER_URL ==="
          curl -v -X POST "$ALERTMANAGER_URL/api/v2/alerts" \
            -H "Content-Type: application/json" \
            -d '[{
                "labels": { 
                  "alertname": "TestAlert",
                  "severity": "warning",
                  "namespace": "monitoring"
                },
                "annotations": {
                  "summary": "Alerte de test",
                  "description": "Ceci est une alerte de test envoy√©e depuis GitHub Actions"
                }
              }]'
          
          echo "=== V√©rification des alertes actives ==="
          sleep 5  # Donner le temps √† AlertManager de traiter l'alerte
          curl -s "$ALERTMANAGER_URL/api/v2/alerts" | jq .
          
          echo "=== V√©rification dans Prometheus ==="
          PROMETHEUS_URL="http://$NODE_IP:$PROMETHEUS_PORT"
          curl -s "$PROMETHEUS_URL/api/v1/alerts" | jq '.data.alerts[] | select(.labels.alertname == "TestAlert")'
      - name: üåê Afficher les acc√®s
        run: |
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          cat <<EOF
          ================================================
          üîî MONITORING STACK OP√âRATIONNEL
          ================================================
          
          üìä Acc√®s aux interfaces :
          - Prometheus:    http://$NODE_IP:$PROMETHEUS_PORT
          - AlertManager:  http://$NODE_IP:$ALERTMANAGER_PORT
          - Grafana:       http://$NODE_IP:$GRAFANA_PORT
          
          üîë Identifiants Grafana:
          - Utilisateur: ${{ secrets.GRAFANA_ADMIN_USER }}
          - Mot de passe: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          
          üìß Notifications envoy√©es √†: ${{ secrets.SMTP_USER }}
          ================================================
          EOF