name: Pipeline CI/CD build app; test unitaire; Analyse SonarQube; deploy docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend
  CONTAINER_NAME: frontend-prod
  PORT: 80
  CACHE_TAG: buildcache
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build-app:
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: |
          npm ci --prefer-offline
          npm install -D @vitest/coverage-v8  # Installation du package manquant

      - name: üõ†Ô∏è Builder l'application
        run: |
          npm run build
          npm run test:coverage  # G√©n√©ration du rapport de couverture
          echo "üëâ Contenu du dossier dist/:"
          ls -lh dist/
          echo "üëâ Contenu du dossier coverage/:"
          ls -lh coverage/

      - name: üì¶ Sauvegarder le build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: dist/
          retention-days: 1
          if-no-files-found: error

  unit-tests:
    needs: build-app
    runs-on: self-hosted
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v3

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üß™ Ex√©cuter les tests unitaires
        run: npm test
        env:
          CI: true
          NODE_ENV: test

  sonarqube-analysis:
    needs: unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: üõéÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚éî Configurer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì¶ Installer les d√©pendances
        run: npm ci --prefer-offline

      - name: üîç Ex√©cuter analyse SonarQube Cloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=frontend
            -Dsonar.organization=mbrabaa
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**
            -Dsonar.projectName=Frontend-App
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
            -Dsonar.links.homepage=https://github.com/${{ github.repository }}
            -Dsonar.links.ci=https://github.com/${{ github.repository }}/actions
            -Dsonar.links.scm=https://github.com/${{ github.repository }}
            -Dsonar.links.issue=https://github.com/${{ github.repository }}/issues

      - name: üè∑Ô∏è V√©rifier la qualit√© du code
        run: |
          echo "Analyse SonarQube compl√®te. Consultez les r√©sultats sur ${{ env.SONAR_HOST_URL }}"

  build-and-push:
    needs: sonarqube-analysis
    runs-on: self-hosted
    steps:
      - name: üõ†Ô∏è Configurer Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üì• R√©cup√©rer le build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: dist/

      - name: üîÑ R√©cup√©rer le cache
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }} || true

      - name: üê≥ Construire et pousser
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }}
          cache-to: |
            type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.CACHE_TAG }},mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: üßπ Nettoyer le cache
        run: |
          docker builder prune -f

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: üîë Connexion Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üßπ Nettoyage
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm -f ${{ env.CONTAINER_NAME }} || true
          docker system prune -af --volumes

      - name: üöÄ D√©ployer
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.PORT }}:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE }}:latest

      - name: ‚úÖ V√©rification
        run: |
          sleep 15
          curl -sSf http://localhost:${{ env.PORT }}/ || exit 1
          echo "üöÄ D√©ploiement r√©ussi !"

      - name: üîç V√©rifier le conteneur dans le runner
        run: |
          echo "=== Conteneurs existants ==="
          docker ps -a
          
          echo "=== Statut du conteneur ==="
          docker inspect -f '{{.State.Status}}' ${{ env.CONTAINER_NAME }} || echo "Conteneur non trouv√©"
          
          if docker ps -a --format '{{.Names}}' | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "=== Logs du conteneur ==="
            docker logs ${{ env.CONTAINER_NAME }}
          fi
          
          echo "=== Test de connexion ==="
          curl -v http://localhost:${{ env.PORT }}/ || echo "√âchec de connexion"